interface Evidence {
  page: number;
  quote: string;
}

interface Flag {
  title: string;
  severity: number;
  why_it_matters: string;
  recommendation: string;
  evidence: Evidence[];
}

interface Report {
  doc_name: string;
  summary: string;
  overall_risk: number;
  flags: Flag[];
}

export function exportToMarkdown(report: Report): string {
  const lines: string[] = [];
  
  lines.push(`# Compliance Analysis Report`);
  lines.push(`\n**Document:** ${report.doc_name}`);
  lines.push(`**Overall Risk Score:** ${(report.overall_risk * 100).toFixed(1)}%`);
  lines.push(`\n---\n`);
  
  lines.push(`## Executive Summary\n`);
  lines.push(report.summary);
  lines.push(`\n---\n`);
  
  lines.push(`## Red Flag Findings\n`);
  
  report.flags.forEach((flag, idx) => {
    lines.push(`### ${idx + 1}. ${flag.title} (Severity: ${flag.severity}/5)\n`);
    lines.push(`**Why It Matters:** ${flag.why_it_matters}\n`);
    lines.push(`**Recommendation:** ${flag.recommendation}\n`);
    
    if (flag.evidence && flag.evidence.length > 0) {
      lines.push(`**Evidence:**\n`);
      flag.evidence.forEach((ev) => {
        lines.push(`- Page ${ev.page}: "${ev.quote}"\n`);
      });
    }
    lines.push(``);
  });
  
  lines.push(`\n---\n`);
  lines.push(`*Generated by AI Compliance Copilot | Powered by Groq*`);
  
  return lines.join('\n');
}

export function downloadMarkdown(report: Report): void {
  const markdown = exportToMarkdown(report);
  const blob = new Blob([markdown], { type: 'text/markdown' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `${report.doc_name.replace('.pdf', '')}_compliance_report.md`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}
